<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="base-dbre"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Incremental Database Reverse Engineering Add-On</title>

  <para>The incremental database reverse engineering (DBRE) add-on allows you
  to generate an application tier of JPA entities based on the tables in your
  database. DBRE will also incrementally maintain your application tier if you
  add or remove tables and columns.</para>

  <section>
    <title>What are the benefits of Roo's incremental reverse
    engineering?</title>

    <para>Traditional JPA reverse engineering tools are designed to introspect
    a database schema and produce a Java application tier once. Roo's
    incremental database reverse engineering feature differs because it has
    been designed to enable developers to repeatedly re-introspect a database
    schema and update their Java application. For example, consider if a
    column or table has been dropped from the database (or renamed). With Roo
    the re-introspection process would discover this and helpfully report
    errors in the Java tier wherever the now-missing field or entity was
    referenced. In simple terms, incremental database reverse engineering
    ensures Java type safety and easy application maintenance even if the
    database schema is constantly evolving. Just as importantly, Roo's
    incremental reverse engineering is implemented using the same unique
    design philosophy as the rest of Roo. This means very fast application
    delivery, clutter-free .java source files, extensive usability features in
    the shell (such as tab completion and hinting) and so on.</para>
  </section>

  <section>
    <title>Installation</title>

    <para>DBRE supports most of the relational databases that can be
    configured for Roo-generated projects such as <link
    xlink:href="http://www.oracle.com/index.html">Oracle</link>, <link
    xlink:href="http://www.postgresql.org/">PostgreSQL</link>, and <link
    xlink:href="http://www.mysql.com/">MySQL</link>. However, due to the
    physical size of some database's JDBC driver jars, Roo does not ship these
    drivers in its distribution zip but does provide an installation script
    called install-jdbc-drivers.roo. To install the drivers, execute the Roo
    command:</para>

    <para><programlisting>roo&gt; script --file install-jdbc-drivers.roo</programlisting></para>

    <para>This command will install the JDBC drivers for Oracle, <link
    xlink:href="http://hsqldb.org/">HSQL</link>, <link
    xlink:href="http://www.h2database.com/html/main.html">H2</link>, <link
    xlink:href="http://jt400.sourceforge.net/">JTOpen</link> (for DB2/400),
    <link xlink:href="http://jtds.sourceforge.net/">jTDS</link> (for MS SQL
    and Sybase), <link xlink:href="http://db.apache.org/derby/">Apache
    Derby</link>, and <link
    xlink:href="http://www.firebirdsql.org/">Firebird</link>. Note that this
    is a one-time-only installation step and is not required to be executed
    again unless you delete the Roo installation directory and re-install
    Roo.</para>

    <para><emphasis role="bold">Note</emphasis>: currently there is no
    open-source JDBC driver for DB2 and Roo does not provide an OSGi driver
    for this database. If you are a DB2 user, you will need to obtain an
    OSGi-enabled driver from IBM or wrap your own DB2 driver jars using Roo's
    wrapping facility.</para>
  </section>

  <section>
    <title>DBRE Addon commands</title>

    <para>After you have installed all the JDBC drivers, you can introspect
    and reverse engineer the database configured for your project. DBRE has
    two commands:</para>

    <orderedlist>
      <listitem>
        <para><programlisting>roo&gt; <emphasis role="bold">database introspect --schema</emphasis> --file</programlisting></para>

        <para>This command displays the database structure, or schema, in XML
        format. You can use the --file option to save the information to the
        specified file.</para>

        <para><emphasis role="bold">Note</emphasis>: the term "schema" is not
        used by all databases, such as MySQL and Firebird, and for these
        databases the target database name is contained in the JDBC URL
        connection string. However the --schema option is still required but
        Roo's Tab assist feature will display "no-schema-required".</para>
      </listitem>

      <listitem>
        <para><programlisting>roo&gt; <emphasis role="bold">database reverse engineer --schema</emphasis> --package</programlisting></para>

        <para>This command creates JPA entiies in your project representing
        the tables and columns in your database. You can use the --package
        option to specify a Java package where your entities will be
        created.</para>

        <para>Since the DBRE Add-on provides incremental database reverse
        engineering, you can execute the command as many times as you want and
        your JPA entities will be maintained by Roo, that is, new fields will
        be added if new columns are added to a table, or fields will be
        removed if columns are deleted. Entities are also deleted in certain
        circumstances if their corresponding tables are dropped.</para>

        <para>If you do not specify the --package option on second and
        subsequent executions of the database reverse engineer command, new
        entities will be created in the same package as they were previously
        created in. </para>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>The @RooDbManaged annotation</title>

    <para>The @RooDbManaged annotation is added to all new entities created by
    the database reverse engineer command. Other Roo annotations, @RooEntity,
    @RooJavaBean, and @RooToString are also added to the entity class. The
    attribute "automaticallyDelete" is added to the @RooDbManaged annotation
    and is set to "true" so that Roo can delete the entity if the associated
    table has been dropped. However, if automaticallyDelete is set to false,
    or if any annotations, fields, constructors, or methods have been added to
    the entity (ie in the .java file), or if any of the Roo annotations are
    removed, the entity will not be deleted. </para>

    <para>The presence of the @RooDbmanaged annotation on an entity class
    triggers the creation of an AspectJ inter-type declaration (ITD) ".aj"
    file where fields and their getters and setters are stored matching the
    columns in the table. For example, if an entity called Employee.java is
    created by the database reverse engineer command, a file called
    Employee_Roo_DbManaged.aj is created and maintained by Roo. All the
    columns of the matching employee table will cause fields to be created in
    the entity's DbManaged ITD. </para>
  </section>
</chapter>
