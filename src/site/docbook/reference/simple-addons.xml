<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="simple-addons"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Simple Add-Ons</title>

  <para>TBC.</para>

  <section xml:id="simple-addons-fast-creation">
    <title>Fast Creation</title>

    <para>TBC</para>
  </section>

  <section xml:id="simple-addons-shell-interaction">
    <title>Shell Interaction</title>

    <para>TBC</para>
  </section>

  <section xml:id="simple-addons-operations">
    <title>Operations</title>

    <para>TBC</para>
  </section>

  <section xml:id="simple-addons-packaging">
    <title>Packaging</title>

    <para>TBC</para>
  </section>

  <section xml:id="simple-addons-distribution">
    <title>Distribution</title>

    <para>TBC</para>
  </section>

  <section>
    <title>Upgrading addons from 1.0.x to 1.1.0</title>

    <para>As we have introduced OSGi as runtime platform for Roo 1.1.0 porting
    addons from a previous version will need some small tweeks to your code.
    Here's a step by step guide on what you need to do:</para>

    <orderedlist>
      <listitem>
        <para>Change packaging of your project to bundle</para>

        <para>As your plugin will result in an OSGi bundle you need to change
        the packaging from simple <code>jar</code> to <code>bundle</code>.
        This will cause the Maven bundle plugin creating the necessary
        metadata for you out of the box.</para>
      </listitem>

      <listitem>
        <para>Change the type of the dependencies to bundle</para>

        <para>Similar to the point above you need to reference dependencies as
        bundles. Again, to let the Maven bundle plugin do its job.</para>
      </listitem>

      <listitem>
        <para>Sync build section of your pom with the one provided in the
        addon template</para>

        <para>Compare changes between your original <filename>add-on
        pom.xml</filename> and a pom.xml generated by the <link
        linkend="???">addon create</link> command (see below). This is mostly
        related to the Maven bundle plugin as well as the Maven SCR plugin
        (see next point for details).</para>

        <example>
          <title>Creating a Roo addon project</title>

          <programlisting>addon create simple --topLevelPackage com.mycompany.myproject.roo.addon</programlisting>

          <para>The easiest way to do so is simply creating a dummy addon
          project using the template and copy the plugin configuration into
          your pom.</para>
        </example>
      </listitem>

      <listitem>
        <para>Replace @ScopeDevelopment annotations with @Component and
        @Service </para>

        <para>Roo uses Apache Felix as OSGi runtime and thus uses
        <interfacename>@Component</interfacename> and
        <interfacename>@Service</interfacename> annotations in combination
        with the Maven SCR plugin<footnote>
            <para>for details see <link
            xlink:href="http://felix.apache.org/site/apache-felix-maven-scr-plugin.html">http://felix.apache.org/site/apache-felix-maven-scr-plugin.html</link></para>
          </footnote> to create descriptors for the OSGi declarative services
        infrastructure.</para>

        <example>
          <title>Component declaration with Apache Felix annotations</title>

          <programlisting language="java">@Service
@Component
public class MyCommands implements CommandMarker {

  @Reference MyOperations operations;

  // Your code goes here
}</programlisting>

          <para>So every <interfacename>@ScopeDevelopment</interfacename>
          annotation you used at your command and operations classes has to be
          replaced by <interfacename>@Service</interfacename> and
          <interfacename>@Component</interfacename>. If you had injected other
          services into your command or operations class you can use
          <interfacename>@Reference</interfacename> to wire that into your
          component instance. Note, that your class will have to implement at
          least one interface Felix can publish the component instance under.
          As there might be further tweaks necessary, have a closer look at
          the output the Maven SCR plugin generates. It will log errors in
          case you still need to change something.</para>
        </example>
      </listitem>
    </orderedlist>
  </section>
</chapter>
