<?xml version="1.0" encoding="UTF-8"?>
<appendix version="5.0" xml:id="upgrade" xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:ns5="http://www.w3.org/1998/Math/MathML"
          xmlns:ns4="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:ns="http://docbook.org/ns/docbook">
  <title>Upgrade Notes and Known Issues</title>

  <section xml:id="upgrade-known-issues">
    <title>Known Issues</title>

    <para>Because Spring Roo integrates a large number of other technologies,
    invariably some people using Roo may experience issues when using certain
    combinations of technologies together. This section aims to list such
    known issues in an effort to help you avoid experiencing any problems. If
    you are able to contribute further information, a solution or workaround
    to any of these known issues, we'd certainly appreciate hearing from you
    via the <link linkend="resources-forums">community forums</link>.</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Release stability</emphasis>: This software has not
        yet reached its final release. While we have already addressed around
        400 bugs and enhancement requests, until we reach final release there
        might be small unknown glitches or missing functionality. In
        particular the documentation is a work-in-progress and some command
        names or command options used in the shell might be varied, replaced
        or removed in the next release. Having said that, we've enjoyed very
        good operating stability and command name consistency from Roo
        1.0.0.RC2, so you should have a pretty reliable experience if you're
        using this version or higher.</para>
      </listitem>

      <listitem>
        <para><emphasis>JDK compatibility</emphasis>: Spring Roo has been
        tested with Sun, IBM, JRockit and Apache Harmony JVMs for Java 5 and
        Java 6. We do not formally support other JVMs or other versions of
        JVMs. We have also had an <link
        xlink:href="https://jira.springsource.org/browse/ROO-347">issue</link>
        reported with versions of Java 6 before 1.6.0_17 due to Java bug <link
        xlink:href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6506304">6506304</link>
        and therefore recommend you always use the latest released version of
        Java 6 for your platform. There is also a known issue with OpenJDK.
        You can read about our testing of different JDKs in issue <link
        xlink:href="https://jira.springsource.org/browse/ROO-106">ROO-106</link>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Human language support</emphasis>: Pluralisation
        within Roo delegates to the <link
        xlink:href="https://inflector.dev.java.net/">Inflector</link> library.
        Due to some issues with Inflector, only English pluralisation is
        supported. If you wish to override the plural selected by Inflector
        (and in turn used by Roo), you can specify a particular plural for
        either a Java type or Java field by using the @RooPlural annotation.
        Longer term it would be nice if someone ported the Inflector code into
        the Roo pluralisation add-on so that we can fix these issues and
        support other languages. We are receptive to contributions from the
        community along these lines.</para>
      </listitem>

      <listitem>
        <para><emphasis>Shell escaping</emphasis>: In certain cases the
        shell's TAB completion may not parse the current line correctly. This
        happens mainly when skipping mandatory options or introducing escaped
        sequences, both of which are uncommon when using the TAB key to build
        the line. We're intending to revisit the shell parsing modules in due
        course and tidy this up.</para>
      </listitem>

      <listitem>
        <para><emphasis>Hibernate issues</emphasis>: Hibernate is the main JPA
        provider we test with and is recommended. However, Hibernate has
        issues with --mappedSuperclass as detailed in <link
        xlink:href="https://jira.springsource.org/browse/ROO-292">ROO-292</link>.
        We recommend you do not use --mappedSuperclass in combination with
        Hibernate. We have found OpenJPA works reliably in all cases, so you
        might want to consider switching to OpenJPA if you are seriously
        impacted by this issue (the "<link
        linkend="command-index-persistence-setup">persistence setup</link>"
        command can be used multiple times, which is useful for experimentally
        switching between different JPA providers).</para>
      </listitem>

      <listitem>
        <para><emphasis>EclipseLink issues</emphasis>: EclipseLink 1.x has an
        issue that currently blocks its use with Roo. Specifically, you'll
        receive a "mapping metadata cannot be applied to fields or properties
        that are transient, static or abstract" ValidationException when
        trying to load the application. The relevant EclipseLink bug number is
        <link
        xlink:href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=277550">277550</link>.
        While this bug was resolved in October 2009 by the EclipseLink
        project, we need to wait for EclipseLink 2.0 to be out before we can
        include it. You may wish to use snapshot releases (by manually editing
        your pom.xml) in the meantime.</para>
      </listitem>

      <listitem>
        <para><emphasis>Integration testing limitations</emphasis>: The data
        on demand mechanism (which is used for integration tests) has limited
        JSR 303 (Bean Validator) compatibility. Roo supports fields using
        @NotNull, @Past and @Future. No other validator annotations are
        formally supported, although many will work. To use other validator
        annotations, you may need to edit your DataOnDemand.java file and add
        a manual <code>getNewTransientEntity(int)</code> method. Refer to a
        generated <code>*_Roo_DataOnDemand.aj</code> file for an example.
        Alternately, do not use the integration test functionality in Roo
        unless you have relatively simple validation constraints or you are
        willing to provide this data on demand method.</para>
      </listitem>

      <listitem>
        <para><emphasis>Stack size too large verification error</emphasis>: We
        have had an isolated report of a
        <literal>java.lang.VerifyError</literal> with a message "Stack size
        too large". Because Roo emits standard Java files and standard AspectJ
        files, this is not an error within Roo. In any event, it can be
        resolved by performing a clean build. You can do this using Project
        &gt; Clean in Eclipse/STS, or by "<literal>mvn clean
        compile</literal>" from the command line, or "<literal>perform
        clean</literal>" from within Roo itself.</para>
      </listitem>
      
      <listitem xml:id="selenium-addon-known-issues">
        <para><emphasis>Selenium Add-on</emphasis>: The maven selenium plugin 
        does not work on Mac OSX 10.6. This is a known issue to the developers
        of this maven plugin and the progress on this issue can be tracked at
         <link xlink:href="http://jira.openqa.org/browse/SRC-743">
        http://jira.openqa.org/browse/SRC-743</link></para>
        <para><emphasis>Date handling in Roo generated Selenium tests</emphasis>:
        Selenium tests are generated at development time by using the 
        '<literal>selenium</literal>' command. At the time of test generation 
        the Selenium add-on will make a best effort to determine the format 
        used in date input fields in Roo scaffolded views (Spring MVC apps). 
        However, the date format expected in localized browsers can be different 
        than the date format that the JVM reports when the tests are generated. 
        For example if the JVM reports a date format of 'dd/MM/yy' for the locale 
        en_AU but the browser sends a locale header of 'en-us' the selenium test 
        will fail since the 'en-us' locale for SHORT date formats is in fact 
        'MM/dd/yy'.</para>
        <para>Therefore, when generating Selenium tests for web pages which are 
        using date fields an <emphasis>exact match between browser locale and 
        JVM locale are required</emphasis>.
        </para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Version Numbering Approach</title>

    <para>Spring Roo observes version number standards based on the <link
    xlink:href="http://apr.apache.org/versioning.html">Apache Portable Runtime
    (APR) versioning guidelines</link> as well as the <link
    xlink:href="http://www.osgi.org">OSGi</link> specifications. In summary
    this means all Roo releases adopt the format of MAJOR.MINOR.PATCH.TYPE.
    Each segment is separated by a period without any spaces. The
    MAJOR.MINOR.PATCH are always integer numbers, and TYPE is an alphanumeric
    value. For example, Roo 1.0.3.M1 means major version 1, minor version 0,
    patch number 3 and release type M1.</para>

    <para>You can always rely on the natural sort order of the version numbers
    to arrive at the latest available version. For example, 1.0.4.RELEASE is
    more recent than 1.0.4.RC2. This is because "RELEASE" sorts alphabetically
    lower than "RC2". The TYPE segment can generally be broken into two
    further undelimited portions, being the release type and a numeric
    increment. For example, RC1 means release candidate 1 and RC4 means
    release candidate 4. One exception to this is RELEASE means the final
    general availability of that release. Other common release types include
    "A" for alpha and "M" for milestone.</para>

    <para>We make no guarantees regarding the compatibility of any release
    that has a TYPE other than "RELEASE". However, for "RELEASE" releases we
    aim to ensure you can use a given "RELEASE" with any other "RELEASE" which
    has the same MAJOR.MINOR version number. As such you should be able to
    switch from 1.0.4.RELEASE to 1.0.9.RELEASE without any changes. However,
    you might have trouble with 1.0.4.RELEASE to 1.0.9.RC1 as RC1 is a
    work-in-progress and we may not have identified all regression issues.
    Obviously this version portability is only our objective, and sometimes we
    need to make exceptions or may inadvertently overlook an issue. We
    appreciate you logging a <link linkend="resources-issue-tracking">bug
    report</link> if you identify a version regression that violates the
    conventions expressed in this section, so that at least we can confirm it
    and either attempt to remedy it on the next release of that MAJOR.MINOR
    version range or bring it to people's attention in the other sections of
    this appendix.</para>

    <para>When upgrading you should review the <link
    linkend="resources-issue-tracking">issue tracker</link> for what has
    changed since the last version. Because most releases include a large
    number of issues in the release notes, we attempt to highlight any major
    issues that may require your attention in the sections below. These notes
    are not all-encompassing but simply pointers to the main upgrade-related
    issues that most people should be aware of. They are also written assuming
    you are maintaining currency with the latest public releases of Spring Roo
    and therefore the changes you may need to make to your project are
    cumulative.</para>
  </section>

  <section xml:id="upgrade-1.0.0.RC3">
    <title>1.0.0.RC3</title>

    <para>The main changes you need to be aware of when upgrading from Spring
    Roo 1.0.0.RC2 to Spring Roo 1.0.0.RC3 are as follows:</para>

    <itemizedlist>
      <listitem>
        <para>Edit your project's <code>pom.xml</code> and verify the Spring
        Roo annotations JAR matches the new Roo release you are using.</para>
      </listitem>

      <listitem>
        <para>Edit your project's <code>pom.xml</code> and verify that major
        libraries match the new versions that are now used by Roo. The
        simplest approach to doing this is to create a new directory and use
        "<code>roo script clinic.roo</code>" and then <code>diff</code> your
        existing <code>pom.xml</code> against the newly-created Petclinic
        <code>pom.xml</code>. The main changes in Roo 1.0.0.RC3 are upgrades
        to Spring Security and the Maven Eclipse plugin.</para>
      </listitem>

      <listitem>
        <para>Edit your project's
        <code>src/main/webapp/WEB-INF/urlrewrite.xml</code> and ensure it
        protects the resources as discussed in the <link
        xlink:href="https://jira.springsource.org/browse/ROO-271">ROO-271</link>.</para>
      </listitem>

      <listitem>
        <para>If you had previously used the "<code>test mock</code>" or
        "<code>persistence exception translation</code>" commands, we have
        moved the resulting AspectJ files to the Spring Aspects project (which
        has always been a dependency of all Roo projects). This will mean you
        automatically receive improvements made to these features in the
        future as part of the Spring Framework release cycle. You should
        therefore delete the following files if your project contains them:
        <code>Jpa_Exception_Translator.aj</code>,
        <code>AbstractMethodMockingControl.aj</code>,
        <code>JUnitStaticEntityMockingControl.aj</code> and
        <code>MockStaticEntityMethods.aj</code>. You must also ensure you use
        Spring Framework 3.0.0.RC2 or above (which is the project which
        contains the Spring Aspects project). See <link
        xlink:href="https://jira.springsource.org/browse/ROO-315">ROO-315</link>
        and <link
        xlink:href="https://jira.springsource.org/browse/ROO-314">ROO-316</link>
        for further information.</para>
      </listitem>

      <listitem>
        <para>Do not attempt to use the Spring Roo integration built into
        SpringSource Tool Suite (STS) 2.2.0 or earlier with Spring Roo
        1.0.0.RC3 or above. You must upgrade to STS 2.2.1 or above if you wish
        to use Roo 1.0.0.RC3 with the STS integration. This is due to an
        internal API change made to support third-party add-on development. If
        you are using STS 2.2.0 (or earlier) and are unable to upgrade, you
        can of course use Roo outside of any version of STS without any issue.
        The upgrade requirement is simply to access the STS integration, such
        as CTRL + R commands and STS' embedded Roo shell.</para>
      </listitem>
    </itemizedlist>

    <para>If you experience any difficulty with upgrading your projects to Roo
    1.0.0.RC3, please use the <link linkend="resources-forums">community
    support forum</link> for assistance.</para>
  </section>
  
  <section xml:id="upgrade-1.0.0.RC4">
    <title>1.0.0.RC4</title>

    <para>When upgrading from Spring Roo 1.0.0.RC3 to Spring Roo 1.0.0.RC4 you 
    should be aware that a large number of changes have been applied to the UI 
    scaffolding functionalities which impact an update to the Web layer:</para>

    <itemizedlist>
      <listitem>
        <para>(IMPORTANT) Run the 'backup' command using the PREVIOUS version of 
        Roo (ie Roo RC3)</para>
      </listitem>
      
      <listitem>
        <para>Edit your project's <code>pom.xml</code> and verify the Spring
        Roo annotations JAR matches the new Roo release (RC4) you are using.</para>
      </listitem>

      <listitem>
        <para>Edit your project's <code>pom.xml</code> and verify that major
        libraries match the new versions that are now used by Roo. The
        simplest approach to doing this is to create a new directory and use
        "<code>roo script clinic.roo</code>" and then <code>diff</code> your
        existing <code>pom.xml</code> against the newly-created Petclinic
        <code>pom.xml</code>. The main changes in Roo 1.0.0.RC4 are upgrades
        to  Spring Framework (version 3.0.0.GA), Spring Security and Spring 
        Web Flow.</para>
      </listitem>

      <listitem>
        <para>The easiest way to update the Web artifacts is to delete the old 
        ones completely: 
        <code>rm -rf src/main/webapp/*</code> 
        </para>
      </listitem>
      
      <listitem>
        <para>Roo RC4 takes advantage of the new type conversion API introduced in
        Spring Framework 3.0.0.RC3 (see <link
        xlink:href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch05.html">
        chapter 5</link> of the Spring reference documentation) which is aimed to 
        replace property editors. To remove existing property editors from your 
        current project you can issue the following command:
        <code>rm -rf src/main/java/com/foo/domain/*Editor.java</code> (depending 
        on your package naming convention) 
        </para>
      </listitem>
      
      <listitem>
        <para>Another (optional) step is to replace the web controllers. This step 
        is only required if you have used the dateFormat
        <code>@RooWebScaffold(dateFormat="..")</code> attribute in the @RooWebScaffold 
        annotation:
        <code>rm -rf src/main/java/com/foo/web/*</code> (depending on your package 
        naming convention) 
        </para> 
        <para>Alternatively, you can simply remove this attribute from the 
        @RooWebScaffold annotation. Note, date formats can now be defined via the 
        <code>field date</code> command (see <link
        xlink:href="https://jira.springsource.org/browse/ROO-453">ROO-453</link> 
        for further information).</para>
      </listitem>
      
      <listitem>
        <para>Run the controller command again to regenerate all necessary web 
        artifacts: <code>controller all --package ~.web</code> or you can use the 
        <code>controller scaffold ...</code> command. This will recreate all web
        artifacts.
        </para>
      </listitem>
      
    </itemizedlist>
    
    <para>If you experience any difficulty with upgrading your projects to Roo
    1.0.0.RC4, please use the <link linkend="resources-forums">community
    support forum</link> for assistance.</para>
    
  </section>   

</appendix>
