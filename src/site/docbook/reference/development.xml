<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="development"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Development Processes</title>

  <para>In this chapter we'll cover how we develop Roo, and how you can check
  it out and get involved.</para>

  <section xml:id="development-guidelines-we-follow">
    <title>Guidelines We Follow</title>

    <para>Whether you are part of the Roo core development team, you want to
    contribute patches, or you want to develop add-ons there are a few
    guidelines we would like to bring to your attention.</para>

    <orderedlist>
      <listitem>
        <para>Design Goals</para>

        <itemizedlist>
          <listitem>
            <para>High productivity for Java developers</para>

            <itemizedlist>
              <listitem>
                <para>encourage to reusing of existing knowledge, skills and
                experience</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Eliminate barriers to adoption , no runtime component,
            minimal size, best possible development experience </para>

            <itemizedlist>
              <listitem>
                <para>avoid lock-in</para>
              </listitem>

              <listitem>
                <para>no runtime component</para>
              </listitem>

              <listitem>
                <para>minimal download size</para>
              </listitem>

              <listitem>
                <para>best possible development experience </para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Embrace the strengths of Java</para>

            <itemizedlist>
              <listitem>
                <para>Development-time: tooling, popularity, API quality,
                static typing</para>
              </listitem>
            </itemizedlist>

            <itemizedlist>
              <listitem>
                <para>Deploy-time: performance, memory use, footprint </para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Embrace the adantages of AspectJ</para>

        <itemizedlist>
          <listitem>
            <para>Use AspectJ intertype declarations (ITDs) for “active”
            generation </para>

            <itemizedlist>
              <listitem>
                <para>Active generation automatically maintains output</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Delivers compilation unit separation of concern</para>

            <itemizedlist>
              <listitem>
                <para>Easier for users, and easier for us as developers</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Instant IDE support</para>

            <itemizedlist>
              <listitem>
                <para>Reduce time to market and adoption barriers</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Other good reasons</para>

            <itemizedlist>
              <listitem>
                <para>Mature, “push in” refactor, compile-time is
                welcome</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>ITD Model</para>

        <itemizedlist>
          <listitem>
            <para>Roo ownes *_Roo_*.aj files</para>

            <itemizedlist>
              <listitem>
                <para>Will delete them if necessary</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <itemizedlist>
          <listitem>
            <para>Every ITD providing add-on registers a 'suffix'
            (namespace)</para>

            <itemizedlist>
              <listitem>
                <para>Eg 'Entity' becomes *_Roo_Entity.aj</para>
              </listitem>

              <listitem>
                <para>A missing ITD provider causes AJ file removal</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

        <itemizedlist>
          <listitem>
            <para>ITDs have proper import management</para>

            <itemizedlist>
              <listitem>
                <para>So they look and feel normal to developers</para>
              </listitem>
            </itemizedlist>

            <itemizedlist>
              <listitem>
                <para>So they 'push-in refactor' in a natural form </para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Usability = Highest Priority</para>

        <itemizedlist>
          <listitem>
            <para>Interactivity of Roo Shell</para>
          </listitem>

          <listitem>
            <para>Tab completion, context awareness, command hiding, hint
            support, etc</para>
          </listitem>

          <listitem>
            <para>Background monitoring of externally made changes (allows
            integration with any development style)</para>
          </listitem>

          <listitem>
            <para>Background monitoring to avoid crude 'generation'
            steps</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Immutability of Metadata Types</para>

        <itemizedlist>
          <listitem>
            <para>Immutability as a first step to manage concurrency</para>
          </listitem>

          <listitem>
            <para>String-based keys (start with 'MID:')</para>
          </listitem>

          <listitem>
            <para>Metadata and keys built on demand only (never
            persisted)</para>
          </listitem>

          <listitem>
            <para>Metadata can depend on other metadata</para>

            <itemizedlist>
              <listitem>
                <para>if 'upstream' metadata changes, 'downstream' metadata is
                notified</para>
              </listitem>

              <listitem>
                <para>Some metadata will want to monitor the file
                system</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Central metadata service available and cache is provided to
            enhance performance</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Conventions we follow</para>

        <itemizedlist>
          <listitem>
            <para>Ensure usability is first-class </para>
          </listitem>

          <listitem>
            <para>Minimize the JAR footprint that Roo requires</para>
          </listitem>

          <listitem>
            <para>Relocate runtime needs to sister Spring projects</para>
          </listitem>

          <listitem>
            <para>Embrace immutability as much as possible</para>
          </listitem>

          <listitem>
            <para>Maximize performance in generated code</para>
          </listitem>

          <listitem>
            <para>Minimize memory consumption in generated code</para>
          </listitem>

          <listitem>
            <para>Use long artifact IDs to facilitate identification</para>
          </listitem>

          <listitem>
            <para>Don't put into @Roo* what you could calculate</para>
          </listitem>

          <listitem>
            <para>Don't violate generator predictability conventions</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="development-source-repository">
    <title>Source Repository</title>

    <para>We develop against a public Git repository for which you can
    anonymously checkout the code:</para>

    <para><programlisting>git clone git://git.springsource.org/roo/roo.git spring-roo</programlisting></para>

    <para>Review source code without Git <link
    xlink:href="http://git.springsource.org/roo/roo/trees/master">http://git.springsource.org/roo/roo/trees/master</link>
    or <link
    xlink:href="https://fisheye.springsource.org/changelog/spring-roo">https://fisheye.springsource.org/changelog/spring-roo</link>.
    </para>

    <para>Roo itself uses Maven, so it's very easy to build standard package,
    install, assembly and site goal PgP should be installed see 'Setting Up
    for Development' section below for details.</para>
  </section>

  <section xml:id="development-setup">
    <title>Setting Up for Development</title>

    <para>A few prerequisite general installation steps are needed before you
    can start coding:</para>

    <para><orderedlist>
        <listitem>
          <para>A proper installation of Java 5 development kit or
          above</para>
        </listitem>

        <listitem>
          <para>Maven 2.2.0+ properly installed and working with your Java
          5+</para>
        </listitem>

        <listitem>
          <para><link
          xlink:href="http://en.wikipedia.org/wiki/Apache_Subversion">SVN</link>
          command-line client. On Windows we have been using the <link
          xlink:href="http://www.collab.net/downloads/subversion/">CollabNet
          Windows Command</link> line client successfully. Alternatively you
          can follow <link
          xlink:href="http://docs.codehaus.org/display/GEOT/SVN+Windows">these
          instructions</link>.</para>
        </listitem>

        <listitem>
          <para>An installation of a PGP tool like <link
          xlink:href="http://www.gnupg.org/download/">GnuPG</link> (Mac: <link
          xlink:href="http://macgpg.sourceforge.net/">MacGPG</link>)</para>

          <para>Ensure you have a valid signature. Use "gpg
          --list-secret-keys". You should see some output like this:</para>

          <para>$ gpg --list-secret-keys</para>

          <para>/Users/sschmidt/.gnupg/secring.gpg</para>

          <para>----------------------------------</para>

          <para>sec 2048R/6163CB9E 2010-06-09</para>

          <para>uid Stefan Schmidt &lt;schmidts@vmware.com&gt;</para>

          <para>uid Stefan Schmidt &lt;stsmedia@gmail.com&gt;</para>

          <para>uid Stefan Schmidt &lt;schmidt@stsmedia.net&gt;</para>

          <para>ssb 2048R/411B8828 2010-06-09</para>

          <para>If you don't see the output, it means you first need to create
          a key. It's very easy to do this. Just use "gpg --gen-key". Then
          verify your newly-created key was indeed created: "gpg
          --list-secret-keys".</para>

          <para>Next you need to publish your key to a public keyserver. Take
          a note of the "sec" key ID shown from the --list-secret-keys. In my
          case it's key ID "6163CB9E". Push your public key to a keyserver via
          the command "gpg --keyserver hkp://pgp.mit.edu --send-keys 6163CB9E"
          (of course changing the key ID at the end). Most public key servers
          share keys, so you don't need to send your public key to multiple
          key servers.</para>

          <para>Finally, every time you build you will be prompted for the
          password of your key. You have three options:</para>

          <itemizedlist>
            <listitem>
              <para>Type the password in every time</para>
            </listitem>

            <listitem>
              <para>Include a -Dgpg.passphrase=thephrase argument when calling
              "mvn"</para>
            </listitem>

            <listitem>
              <para>Edit ~/.bashrc and add -Dgpg.passphrase=thephrase to
              MAVEN_OPTS</para>
            </listitem>
          </itemizedlist>

          <para>Of course the most secure option is to type the password every
          time. However, if you're doing a lot of builds you might prefer
          automation (we assume you have chosen this option for the next
          chapters).</para>

          <para>One final note if you're new to GPG: don't lose your private
          key! Backup the secring.gpg file, as you'll need it to ever revoke
          your key or sign a replacement key (the public key servers offer no
          way to revoke a key unless you can sign the recovation
          request).</para>
        </listitem>

        <listitem>
          <para>(Optional) Install the free <link
          xlink:href="http://www.springsource.com/developer/sts">SpringSource
          Tool Suite</link> for development</para>
        </listitem>
      </orderedlist></para>
  </section>

  <section xml:id="development-building">
    <title>Building Roo</title>

    <orderedlist>
      <listitem>
        <para>Building Spring Roo from Source</para>

        <para>Some Roo modules require JARs that are not already in OSGi form.
        That is, they don't have an OSGi-aware manifest. Roo has a special
        project called "wrapper" that can convert normal JARs into OSGi JARs.
        </para>

        <para>You'll need to run the wrapper before trying to do anything with
        Roo. If you don't do this, you'll see errors which state Maven cannot
        find "org.springframework.roo.wrapping.some_module".</para>

        <para>To create the wrapped JARs, from the root Roo checkout location
        type: </para>

        <para><programlisting>&lt;spring-roo&gt;$ <emphasis role="bold">git pull</emphasis>

&lt;spring-roo&gt;$ <emphasis role="bold">cd wrapping</emphasis>

&lt;spring-roo&gt;/wrapping$ <emphasis role="bold">mvn clean install</emphasis>

&lt;spring-roo&gt;/wrapping$ <emphasis role="bold">cd ..
</emphasis>
&lt;spring-roo&gt;$ <emphasis role="bold">mvn clean install</emphasis></programlisting>You
        need not do this too often. If you get an error about a missing
        wrapper JAR (org.springframework.roo.wrapping.some_module), simply
        repeat the above commands and you should be fine. </para>
      </listitem>

      <listitem>
        <para>Developing within Eclipse</para>

        <para>The Spring Roo team use SpringSource Tool Suite to develop Roo,
        which is our free IDE. While you can use any IDE at all, these
        instructions assume you're using STS. The main difference to be aware
        of is STS has setup the M2_REPO variable correctly, and thus the Maven
        paths work out of the box. You can setup M2_REPO manually within a
        normal Eclipse if you wish; just use Window &gt; Preferences &gt; Java
        &gt; Build Path &gt; Classpath Variables and set M2_REPO to the
        ~/.m2/repository directory. </para>

        <para>First of all change into the directory where you checked out
        Roo. Now you need to instruct Maven to produce .classpath and .project
        files for Eclipse: <programlisting>$ <emphasis role="bold">mvn clean eclipse:clean eclipse:eclipse </emphasis></programlisting></para>

        <para>If this fails, please review the "OSGi Wrapping JARs" section
        above. </para>

        <para>You should now be able to import the projects into STS/Eclipse.
        Click File &gt; Import &gt; Existing Projects into Workspace, and
        select the same directory as where you ran the "mvn" command from.
        Several dozen Spring Roo projects will be listed and can be imported.
        </para>

        <para>Alternatively you can skip the previous step and simply import
        the project as Maven project into STS. STS ships by default with the
        m2eclipse plugin so there is no additional installation
        required.</para>

        <para>At this stage you're free to open any class and edit it as
        normal.</para>
      </listitem>

      <listitem>
        <para>Running the Command Line Tool</para>

        <para>Roo uses OSGi and OSGi requires compiled JARs. Therefore as you
        make changes in Roo, you'd normally need to "mvn package" the relevant
        project(s), then copy the resulting JAR files to the OSGi container.
        </para>

        <para>To simplify development and OSGi-related procedures, Roo's Maven
        POMs have been carefully configured to emit manifests, SCR descriptors
        and dependencies. These are mostly emitted when you use "mvn package".
        </para>

        <para>To try Roo out, you should type the following: <programlisting>$ <emphasis
              role="bold">cd ~/some-directory </emphasis>

$ <emphasis role="bold">roo-dev</emphasis></programlisting></para>

        <para>It's important that you run roo-dev from a directory that you'd
        like to eventually contain a Roo-created project. Don't try to run
        roo-dev unless your current working directory is empty or contains a
        previously-created Roo project. </para>

        <para>If this fails, please review the "OSGi Wrapping JARs" section
        above. </para>

        <para>Notice we used "mvn install" rather than "mvn package". This is
        simply for convenience, as it will allow you to change into any Roo
        module subdirectory and "mvn install". If you never "mvn install", you
        will need to "mvn install" from the root directory so internal build
        dependencies are preserved. You can use "mvn package" from the root if
        you prefer. "mvn install" just gives you more flexibility. </para>

        <para>Roo ships with a command line tool called "roo-dev". This is
        only maintained for *nix. It copies all relevant JARs from the Roo
        directories into ~/roo/bootstrap/target/osgi. This directory
        represents a configured Roo OSGi instance. "roo-dev" also launches the
        OSGi container, which is currently Apache Felix. </para>

        <para>Be aware that Felix will cache the bundles you have installed
        each run (in /roo/bootstrap/target/osgi/cache). It's therefore more
        common that instead of using "roo-dev", you will type a command like:
        <programlisting>$ <emphasis role="bold">rm -rf ~/&lt;spring-roo&gt;/bootstrap/target/osgi; roo-dev</emphasis></programlisting></para>

        <para>The above guarantees your Felix instance is fully cleaned. The
        "roo-dev" command line tool doesn't do this for you, as you might wish
        to test the operation of other bundles with Roo core. </para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="development-how-you-can-help">
    <title>How You Can Help</title>

    <para>The Spring Roo project provides forums for its users at <link
    linkend="???"><link
    xlink:href="http://forum.springsource.org/forumdisplay.php?f=67">http://forum.springsource.org/forumdisplay.php?f=67</link></link>.
    We encourage more experienced Roo users to answer questions and provide
    pointers to our documentation or project Jira to help out newbies. </para>

    <para>The Spring Roo documentation can be found at <link
    xlink:href="http://static.springsource.org/spring-roo/reference/html-single/index.html">http://static.springsource.org/spring-roo/reference/html-single/index.html</link>.
    Contributions to the documentation are always welcome. </para>

    <para>The Spring Roo team uses the projects bug tracker extensively to
    manage bug reports, improvement requests and new feature requests. You are
    encouraged to create new tickets if a similar one does not already exist.
    You can also comment on existing tickets, contribute ideas, suggest
    solutions, or even vote on existing tickets to express your preferences.
    You can find our bug tracker at <link
    xlink:href="https://jira.springframework.org/browse/ROO">https://jira.springframework.org/browse/ROO</link>.</para>

    <para>The Spring Roo team also actively monitors your Twitter messages
    which use the @SpringRoo message tag. Feel free to tweet about new
    releases, features, Spring Roo blogs or anything else related to Roo. You
    can also follow <link
    xlink:href="http://twitter.com/#!/springroo">@SpringRoo</link> or its core
    developers <link
    xlink:href="http://twitter.com/#!/benalexau">@benalexau</link>, <link
    xlink:href="http://twitter.com/#!/schmidtstefan">@schmidtstefan</link> and
    <link xlink:href="http://twitter.com/#!/alankstewart">@alankstewart</link>
    to stay in the loop about the latest Roo news.</para>

    <para>You can also help by presenting at your local Java user group or
    even conferences. You can blog about your experiences with Spring Roo or
    even publish industry white papers. </para>

    <para>Yet another form of support is the translation of resource bundles.
    Of course, you are encouraged to develop new Spring Roo add-ons, which, if
    shared with the Roo community, can help other people become more
    productive.</para>
  </section>

  <section xml:id="development-patches">
    <title>Submitting Patches</title>

    <para>Submitting a patch for a bug, improvement or even a new feature
    which you always wanted addressed can be of great help to the Spring Roo
    project. </para>

    <para>To get started, you could build Roo from sources (as described
    above), and locally start changing source code as you see fit. Then test
    your changes and if all works well, you can create a git patch and attach
    it to a ticket in our bug tracker. To create a patch with Git you can
    simply use the following command in Roo's source code root
    directory:</para>

    <para><programlisting>&lt;spring-roo&gt;$ git status
&lt;spring-roo&gt;$ git add (files)
&lt;spring-roo&gt;$ git commit -m 'Explain what I changed'
&lt;spring-roo&gt;$ <emphasis role="bold">git format-patch origin/master --stdout &gt; ROO-XXXX.patch</emphasis></programlisting>The
    resulting .patch file can then be attached to the ROO-XXXX ticket in our
    bug tracker.</para>
  </section>

  <section xml:id="development-committer-path">
    <title>Path to Committer Status</title>

    <para>TBC</para>
  </section>
</chapter>
