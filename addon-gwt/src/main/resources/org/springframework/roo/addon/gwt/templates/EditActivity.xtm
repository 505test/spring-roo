package {{=packageName}};

import com.google.gwt.app.place.AbstractProxyEditActivity;
import com.google.gwt.app.place.PlaceController;
import com.google.gwt.app.place.ProxyEditView;
import com.google.gwt.event.shared.EventBus;
import com.google.gwt.requestfactory.shared.EntityProxyId;
import com.google.gwt.requestfactory.shared.Receiver;
import com.google.gwt.requestfactory.shared.RequestObject;
import com.google.gwt.user.client.ui.AcceptsOneWidget;

{{#imports}}import {{=import}};
{{/imports}}

import java.util.Arrays;
import java.util.Collections;
import java.util.ArrayList;
import java.util.List;

/**
 * An activity that requests all info on a particular {{=name}}, allows
 * the user to edit it, and fires a given request to apply the results.
 */
public class {{=className}} extends
    AbstractProxyEditActivity<{{=proxy}}> {
	private static ProxyEditView<{{=proxy}}, ?> defaultView;

	private static ProxyEditView<{{=proxy}}, ?> getDefaultView() {
		if (defaultView == null) {
			defaultView = new {{=editView}}();
		}
		return defaultView;
	}

	private final ApplicationRequestFactory requests;

	/**
	 * Creates an activity that uses the default singleton view instance.
	 */
	public {{=className}}(EntityProxyId proxyId, 
	    ApplicationRequestFactory requests, PlaceController placeController, 
	    boolean creating) {
		this(getDefaultView(), proxyId, requests, placeController, creating);
	}

	/**
   * Creates an activity that uses a given view instance.
	 */
	public {{=className}}(ProxyEditView<{{=proxy}}, ?> view, 
	    EntityProxyId proxyId, ApplicationRequestFactory requests, 
	    PlaceController placeController, boolean creating) {
		super(view, proxyId, {{=proxy}}.class, creating, requests, placeController);
		this.requests = requests;
	}

  @Override
  public void start(AcceptsOneWidget display, EventBus eventBus) {
    {{#setEnumValuePickers}}
    get{{=editView}}().{{=setValuePickerName}}(Arrays.asList({{=valueType}}.values()));

    {{/setEnumValuePickers}}
    {{#setProxyValuePickers}}
    get{{=editView}}().{{=setValuePickerName}}(Collections.<{{=valueType}}> emptyList());

    requests.{{=requestInterface}}().{{=findMethod}}.with(
        {{=rendererType}}.instance().getPaths()).fire(
            new Receiver<List<{{=valueType}}>>() {
                public void onSuccess(List<{{=valueType}}> response) {
                    List<{{=valueType}}> values = new ArrayList<{{=valueType}}>();
                    values.add(null);
                    values.addAll(response);
                    get{{=editView}}().{{=setValuePickerName}}(values);
            }
    });
    {{/setProxyValuePickers}}
    super.start(display, eventBus);
  }

	protected RequestObject<? extends Object> getPersistRequest({{=proxy}} proxy) {
	    return requests.{{=nameUncapitalized}}Request().persist(proxy);
	}

  private {{=editView}} get{{=editView}}() {
    return (({{=editView}}) getView());
  }
}
