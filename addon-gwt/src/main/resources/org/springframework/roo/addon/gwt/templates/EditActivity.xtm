package {{=packageName}};

import com.google.gwt.app.place.AbstractProxyEditActivity;
import com.google.gwt.app.place.PlaceController;
import com.google.gwt.app.place.ProxyEditView;
import com.google.gwt.requestfactory.shared.Receiver;
import com.google.gwt.requestfactory.shared.ProxyRequest;
import com.google.gwt.requestfactory.shared.RequestObject;
import com.google.gwt.event.shared.EventBus;
import com.google.gwt.requestfactory.shared.SyncResult;
import com.google.gwt.requestfactory.shared.Value;
{{#imports}}import {{=import}};
{{/imports}}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;

/**
 * An activity that requests all info on an {{=name}}, allows the user to edit
 * it, and persists the results.
 */
public class {{=className}} extends AbstractProxyEditActivity<{{=proxy}}> {
	private static ProxyEditView<{{=proxy}}> defaultView;

	private static ProxyEditView<{{=proxy}}> getDefaultView() {
		if (defaultView == null) {
			defaultView = new {{=editView}}();
		}
		return defaultView;
	}

	private final ApplicationRequestFactory requests;

	/**
	 * Creates an activity that uses the default singleton view instance.
	 */
	public {{=className}}({{=proxy}} proxy, ApplicationRequestFactory requests, PlaceController placeController, boolean creating) {
		this(getDefaultView(), proxy, requests, placeController, creating);
	}

	/**
	 * Creates an activity that uses its own view instance.
	 */
	public {{=className}}(ProxyEditView<{{=proxy}}> view, {{=proxy}} proxy, ApplicationRequestFactory requests, PlaceController placeController, boolean creating) {
		super(view, proxy, {{=proxy}}.class, creating, requests, placeController);
		this.requests = requests;
	}

    @Override
    public void start(Display display, EventBus eventBus) {
    {{#setEnumValuePickers}}
    get{{=editView}}().{{=setValuePickerName}}(Arrays.asList({{=valueType}}.values()));

    {{/setEnumValuePickers}}
    {{#setProxyValuePickers}}
    get{{=editView}}().{{=setValuePickerName}}(Collections.<{{=valueType}}> emptyList());

    requests.{{=requestInterface}}().{{=findMethod}}.with(
        {{=rendererType}}.instance().getPaths()).fire(
            new Receiver<List<{{=valueType}}>>() {
                public void onSuccess(List<{{=valueType}}> response,
                    Set<SyncResult> syncResults) {
                    List<{{=valueType}}> values = new ArrayList<{{=valueType}}>();
                    values.add(null);
                    values.addAll(response);
                    get{{=editView}}().{{=setValuePickerName}}(values);
            }
    });
    {{/setProxyValuePickers}}
        super.start(display, eventBus);
    }


	@Override
	protected ProxyRequest<{{=proxy}}> getFindRequest(Value<Long> id) {
	    return requests.{{=nameUncapitalized}}Request().find{{=name}}(id);
	}

	protected RequestObject<Void> getPersistRequest({{=proxy}} proxy) {
	    return requests.{{=nameUncapitalized}}Request().persist(proxy);
	}

    private {{=editView}} get{{=editView}}() {
        return (({{=editView}}) getView());
    }
}
