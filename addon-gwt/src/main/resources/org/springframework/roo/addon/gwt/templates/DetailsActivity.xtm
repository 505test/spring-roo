package {{=packageName}};

import com.google.gwt.app.place.AbstractActivity;
import com.google.gwt.app.place.PlaceController;
import com.google.gwt.app.place.ProxyPlace;
import com.google.gwt.app.place.ProxyDetailsView;
import com.google.gwt.app.place.ProxyPlace.Operation;
import com.google.gwt.event.shared.EventBus;
import com.google.gwt.requestfactory.shared.Receiver;
import com.google.gwt.requestfactory.shared.RequestObject;
import com.google.gwt.requestfactory.shared.SyncResult;
import com.google.gwt.requestfactory.shared.Value;
{{#imports}}import {{=import}};
{{/imports}}
import java.util.Set;

/**
 * An {@link com.google.gwt.app.place.Activity Activity} that requests and
 * displays detailed information on a given {{=name}}.
 */
public class {{=className}} extends AbstractActivity implements ProxyDetailsView.Delegate {
	private static ProxyDetailsView<{{=proxy}}> defaultView;
	
	private static ProxyDetailsView<{{=proxy}}> getDefaultView() {
		if (defaultView == null) {
			defaultView = new {{=detailsView}}();
		}
		return defaultView;
	}

	private final ApplicationRequestFactory requests;
	private final PlaceController placeController;
	private final ProxyDetailsView<{{=proxy}}> view;
	private {{=proxy}} proxy;
	private Display display;

	/**
	 * Creates an activity that uses the default singleton view instance.
	 */
	public {{=className}}({{=proxy}} proxy, ApplicationRequestFactory requests, PlaceController placeController) {
		this(proxy, requests, placeController, getDefaultView());
	}

	/**
   * Creates an activity that uses its own view instance.
 	 */
	public {{=className}}({{=proxy}} proxy, ApplicationRequestFactory requests, PlaceController placeController, ProxyDetailsView<{{=proxy}}> view) {
		this.placeController = placeController;
		this.proxy = proxy;
		this.requests = requests;
		view.setDelegate(this);
		this.view = view;
	}

	public void deleteClicked() {
		if (!view.confirm("Really delete this proxy? You cannot undo this change.")) {
			return;
		}
   		
		RequestObject<Void> deleteRequest = requests.{{=nameUncapitalized}}Request().remove(view.getValue());
		deleteRequest.fire(new Receiver<Void>() {
			public void onSuccess(Void ignore, Set<SyncResult> response) {
				if (display == null) {
					// This activity is dead
					return;
				}

				display.showActivityWidget(null);
			}
		});
	}

	public void editClicked() {
		placeController.goTo(new ProxyPlace(view.getValue(), Operation.EDIT));
	}

	public void onCancel() {
		onStop();
	}

	public void onStop() {
		display = null;
	}

	public void start(Display displayIn, EventBus eventBus) {
    	this.display = displayIn;
    	Receiver<{{=proxy}}> callback = new Receiver<{{=proxy}}>() {
			public void onSuccess({{=proxy}} proxy, Set<SyncResult> syncResults) {
        		if (display == null) {
          			return;
       			}
				view.setValue(proxy);
				display.showActivityWidget(view);
			}
		};

		requests.{{=nameUncapitalized}}Request().find{{=name}}(Value.of(proxy.getId())).with({{=displayFields}}).fire(callback);
	}
}
