#parse ("common.vm")
package $packageName;

import com.google.gwt.app.place.AbstractRecordListActivity;
import com.google.gwt.app.place.PlaceController;
import com.google.gwt.app.place.RecordListView;
import com.google.gwt.event.shared.EventBus;
import com.google.gwt.requestfactory.shared.Receiver;
import com.google.gwt.requestfactory.shared.RecordListRequest;
import com.google.gwt.view.client.Range;
#declareImports()

/**
 * Activity that requests and displays all {${entity.record}}
 * records.
 */
public class $className extends AbstractRecordListActivity<${entity.record}> {

	private static RecordListView<${entity.record}> defaultView;

	private static RecordListView<${entity.record}> getDefaultView() {
		if (defaultView == null) {
			defaultView = new ${entity.listView}();
		}
		return defaultView;
	}

	private final ${shared.requestFactory} requests;

	/**
	 * Creates an activity that uses the default singleton view instance.
 	 */
	public $className(${shared.requestFactory} requests, PlaceController placeController) {
		this(requests, getDefaultView(), placeController);
	}

	/**
   * Creates an activity that uses the given view instance.
	 */
	public $className(${shared.requestFactory} requests, RecordListView<${entity.record}> view, PlaceController placeController) {
    super(requests, placeController, view, ${entity.record}.class);

    this.requests = requests;
	}

	public void start(Display display, EventBus eventBus) {
    // TODO(rjrjr) this can move to super class when event bus gets smarter
		eventBus.addHandler(${entity.recordChanged}.TYPE, new ${entity.changeHandler}() {
			public void on${entity.name}Changed(${entity.recordChanged} event) {
				update(event.getWriteOperation(), event.getRecord());
			}
		});
		
		super.start(display, eventBus);
	}

	protected RecordListRequest<${entity.record}> createRangeRequest(Range range) {
		return requests.${entity.nameUncapitalized}Request().find${entity.name}Entries(range.getStart(), range.getLength());
	}

	protected void fireCountRequest(Receiver<Long> callback) {
		requests.${entity.nameUncapitalized}Request().count${entity.pluralName}().fire(callback);
	}
}
