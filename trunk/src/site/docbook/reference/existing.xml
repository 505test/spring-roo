<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="existing" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Existing Building Blocks</title>

  <para>Sometimes you have an existing project or database. This chapter
  covers how to make Spring Roo work with it.</para>

  <section xml:id="existing-project">
    <title>Existing Projects</title>

    <para>If you have an existing project that you'd like to use with Roo, we
    recommend that you follow these steps:</para>

    <orderedlist>
      <listitem>
        <para>Decide whether your project files are easier to migrate to a new
        Roo project or it's easier to amend your current project into a Roo
        project. Both approaches are valid. The following steps reflect
        migrating your current project into a Roo project.</para>
      </listitem>

      <listitem>
        <para>Convert the project to use Maven. Ensure you use the correct
        Maven directory layouts.</para>
      </listitem>

      <listitem>
        <para>Move your Spring configuration and other files to the same
        directories as used by Roo. Start a new Roo-based project if you're
        unsure where these files are typically stored.</para>
      </listitem>

      <listitem>
        <para>Add the Roo annotations JAR and Maven AspectJ plugin to your
        POM. Use the same syntax as a new Roo-based project would use.</para>
      </listitem>

      <listitem>
        <para>Load Roo on your project and verify it does not report any
        errors. Resolve any errors before continuing.</para>
      </listitem>

      <listitem>
        <para>Add a test @RooToString annotation to one of your existing
        classes. Verify the ITD is created and can be used within your IDE (if
        you're using an IDE). Check the new toString() method is used.</para>
      </listitem>

      <listitem>
        <para>Start incrementally using the simpler Roo add-ons like toString
        support and JavaBeans. When you're confident, move onto other Roo
        commands and add-ons.</para>
      </listitem>
    </orderedlist>

    <para>If you encounter any difficulty, we recommend you consult the <link
    linkend="resources">Roo Resources</link> section of the reference guide
    for help.</para>
  </section>

  <section xml:id="existing-database">
    <title>Existing Databases</title>

    <para>Many organisations have existing databases that they'd like to use
    with Roo.</para>

    <para>Enhancement request <link
    xlink:href="https://jira.springsource.org/browse/ROO-435">ROO-435</link>
    covers adding functionality into Roo to introspect an existing database
    and create Java entities that represent the datbase model. Please vote for
    this enhancement request if you'd like to see this capability added to
    Roo.</para>

    <para>In the meantime, we recommend you use your preferred JPA provider's
    tool for introspecting a database and creating JPA entities that use the
    relevant JPA annotations. Roo is immediately compatible with such
    entities, and you need only add the @RooEntity annotation to the created
    JPA entities. The remaining Roo features will then be compatible with the
    introspected entities and you should have no difficulty using them.</para>
  </section>
</chapter>
