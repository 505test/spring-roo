; roo script build a domain model bundle for a CD database application using Bundlor
; to manage the manifest

create project org.springsource.cddb.domain

; add manifest generation capability
install bundlor


; let's make an entity to represent a CD
install jpa -database HYPERSONIC_IN_MEMORY -provider HIBERNATE 
new persistent class jpa -name ~.CompactDisc 
add field string -fieldName title -notNull  
add field string -fieldName artist -notNull
install finder -finderName  findCompactDiscsByTitleLike
install finder -finderName  findCompactDiscsByArtistLike

configure logging -level DEBUG
  
; Now you can create a bundle ready to deploy by quitting roo and 
; running  "mvn clean package".
; The manifest generation occurs during the packaging step, and
; the resulting jar file is ready to be deployed straight to
; SpringSource dm Server by dropping it in the pickup directory.
; (You can also deploy to any other OSGi Service Platform of
; your choosing).

; When deploying the bundle, the project dependencies need to be 
; available in a dm Server repository ('provided' dependencies 
; are not packaged as part of the build). An easy way to 
; ensure this is to configure your maven repository directory
; as a dm Server repository.

; To do this, edit the config/repository.properties file in your
; dm Server installation, add the lines:

; bundles-mvn.type=external
; bundles-mvn.searchPattern=${user.home}/.m2/repository/**/{bundle}

; and then add the mvn repo to the end of the repository chain:

; chain=bundles-subsystems,bundles-ext,bundles-usr,libraries-ext,libraries-usr,bundles-mvn

; type "help bundlor" to see the commands available to help you manage your
; manifest